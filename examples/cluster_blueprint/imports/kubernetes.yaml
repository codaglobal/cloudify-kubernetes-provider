tosca_definitions_version: cloudify_dsl_1_3

imports:
  - monitoring.yaml

inputs:

  labels:
    default: {}

  cfy_tenant:
    type: string
    default: { get_secret: cfy_tenant }

  cfy_password:
    type: string
    default: { get_secret: cfy_password }

  cfy_user:
    type: string
    default: { get_secret: cfy_user }

plugins:

  cloudify_node_drop:
    executor: central_deployment_agent
    source: cloudify_node_drop

workflows:

  delete:
    mapping: cloudify_node_drop.cloudify_drop.workflow.delete
    parameters:
      scalable_entity_name:
        description: >
          Which node/group to scale. Note that the parameter specified
          should denote the node/group name and NOT the node/group instance id.
      delta:
        description: >
            How many node/group instances should be added/removed.
            A positive number denotes increase of instances.
            A negative number denotes decrease of instances.
        default: 1
        type: integer
      scale_compute:
        description: >
            If a node name is passed as the `scalable_entity_name` parameter
            and that node is contained (transitively) within a compute node
            and this property is 'true', operate on the compute node instead
            of the specified node.
        default: false
      ignore_failure:
        default: false
        type: boolean
      removed_ids_exclude_hint:
        description: >
            Node instances denoted by these instance ids should be *kept* if
            possible.
        default: []
      removed_ids_include_hint:
        description: >
            Node instances denoted by these instance ids should be *removed*
            if possible.
        default: []

node_types:

  cloudify.nodes.Kubernetes.Master:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/kubernetes_master/create.py
        configure:
          implementation: scripts/kubernetes_master/configure.py
        start:
          implementation: scripts/kubernetes_master/start.py

  cloudify.nodes.ApplicationServer.kubernetes.Node:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          # set ip and hostname and setup services
          implementation: scripts/kubernetes_master_services/create.py
          inputs:
            cfy_user:
              default: { get_input: cfy_user }
            cfy_password:
              default: { get_input: cfy_password }
            cfy_tenant:
              default: { get_input: cfy_tenant }
            agent_user:
              default: { get_input: agent_user }
            full_install:
              default: no
      maintenance:
        mount:
          implementation: scripts/kubernetes_master_services/mount.py
        unmount:
          implementation: scripts/kubernetes_master_services/unmount.py

  cloudify.nodes.Kubernetes.build_node:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      full_install:
        default: no
      linux_distro:
        default: centos
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/buildtools/create.py
        configure:
          implementation: scripts/buildtools/configure.py
        start:
          implementation: scripts/buildtools/start.py

node_templates:

  kubernetes_master:
    type: cloudify.nodes.Kubernetes.Master
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_master_host

  kubernetes_master_build:
    type: cloudify.nodes.Kubernetes.build_node
    properties:
      full_install: all
    relationships:
    - target: kubernetes_master
      type: cloudify.relationships.contained_in

  kubernetes_master_services:
    type: cloudify.nodes.ApplicationServer.kubernetes.Node
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            full_install: all
    relationships:
    - target: kubernetes_master
      type: cloudify.relationships.contained_in
    # we can start only after set all properties
    - target: kubernetes_master_build
      type: cloudify.relationships.depends_on
    - target: k8s_node
      type: cloudify.relationships.depends_on
    - target: k8s_load
      type: cloudify.relationships.depends_on


outputs:

  kubernetes_cluster_bootstrap_token:
    value: { get_attribute: [ kubernetes_master, bootstrap_token ] }

  kubernetes_cluster_bootstrap_hash:
    value: { get_attribute: [ kubernetes_master, bootstrap_hash ] }

  kubernetes_cluster_master_ip:
    value: { get_attribute: [ kubernetes_master, master_ip ] }

  kubernetes-admin_client_certificate_data:
    value: { get_attribute: [ kubernetes_master, kubernetes-admin_client_certificate_data ] }

  kubernetes-admin_client_key_data:
    value: { get_attribute: [ kubernetes_master, kubernetes-admin_client_key_data ] }

  kubernetes_certificate_authority_data:
    value: { get_attribute: [ kubernetes_master, kubernetes_certificate_authority_data ] }
